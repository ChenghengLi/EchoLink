name: Unit tests + linting 
on:
  push:
    branches:
      - testing
  pull_request:
    branches:
      - testing

jobs:
  tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create empty .env files
      run: |
        echo "Creating empty .env files"
        touch ./frontend/.env
        touch ./backend/.env
        echo ".env files created"

    - name: Build all Docker containers
      run: |
        docker compose -f docker-compose.yml build

    - name: Run the backend-test container (Unit Tests + Lint)
      run: |
        docker compose run backend-test
    
    - name: Run the frontend-test container (Unit Tests + Lint)
      run: |
        docker compose run frontend-test

  update_status:
    runs-on: ubuntu-latest
    needs: tests  
    container:
      image: ghcr.io/supportpal/github-gh-cli:2.62.0 
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install jq
      run: |
        apt-get update && apt-get install -y jq

    - name: Extract issue numbers from commit messages
      id: extract_issues
      shell: bash
      run: |
        # Get all commit messages in the current push or pull request
        commit_messages=$(git log --pretty=%B ${{ github.event.before }}..${{ github.sha }})
        
        # Initialize an empty array to store issue numbers
        issue_numbers=()

        # Iterate over each commit message
        while IFS= read -r commit_message; do
          # Extract issue numbers from the commit message
          if [[ $commit_message =~ [^0-9]*([0-9]+) ]]; then
            issue_numbers+=("${BASH_REMATCH[1]}")
          fi
        done <<< "$commit_messages"

        # Check if any issue numbers were found
        if [ ${#issue_numbers[@]} -eq 0 ]; then
          echo "No issue numbers found in commit messages"
          exit 1
        fi

        # Join issue numbers into a comma-separated string
        issue_numbers_str=$(IFS=,; echo "${issue_numbers[*]}")

        # Set the issue numbers as an environment variable
        echo "issue_numbers=$issue_numbers_str" >> $GITHUB_ENV

    - name: Update project items
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        # Split the issue numbers into an array
        IFS=',' read -r -a issue_numbers <<< "${{ env.issue_numbers }}"

        # Iterate over each issue number and update the project item
        for num in "${issue_numbers[@]}"; do
          task_id=$(gh project item-list 4 --owner UB-ES-2024-F3 --format json | jq --argjson num "$num" '.items[] | select(.content.number == $num) | .id')
          if [ -n "$task_id" ]; then
            gh project item-edit --id "$task_id" --field-id PVTSSF_lADOCvtt0s4AqPZczghhQYk --project-id PVT_kwDOCvtt0s4AqPZc --single-select-option-id f48d26e9
          else
            echo "No task ID found for issue number $num"
          fi
        done
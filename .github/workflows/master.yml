name: Unit tests + linting
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      
    - name: Create empty .env files
      run: |
        echo "Creating empty .env files"
        touch ./frontend/.env
        touch ./backend/.env
        echo ".env files created"

    - name: Set up backend environment variables
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ./backend/.env
        echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> ./backend/.env
        echo "ACCESS_TOKEN_EXPIRE_DAYS=${{ secrets.ACCESS_TOKEN_EXPIRE_DAYS }}" >> ./backend/.env

    - name: Set up frontend environment variables
      run: |
        echo "VITE_API_URL=http://backend:8000" >> ./frontend/.env
        echo "PLAYWRIGHT_URL=http://frontend:80" >> ./frontend/.env
        echo "PLAYWRIGHT_BACKEND_URL=http://backend:8000" >> ./frontend/.env

    - name: Build all Docker containers
      run: |
        docker compose -f docker-compose.yml build

    - name: Run the backend-test container (Unit Tests + Lint)
      run: |
        docker compose run backend-test
    
    - name: Run the frontend-test container (Unit Tests + Lint)
      run: |
        docker compose run frontend-test
        
    - name: Run e2e tests container 
      run: |
        docker compose run e2e-test

  deploy:
    needs: tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Deploy to Server
      env:
        USER: root
        HOST: 209.38.168.71
        WORKDIR: EchoLink
      run: |
        ssh -o StrictHostKeyChecking=no $USER@$HOST << EOF
          cd $WORKDIR
          git pull https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/UB-ES-2024-F3/EchoLink.git

          # Rebuild specific Docker images and restart containers
          docker compose down --remove-orphans
          docker compose build frontend backend postgres  # Specify the services to build
          docker compose up -d frontend backend postgres  # Specify the services to start
        EOF

  update_status:
    runs-on: ubuntu-latest
    needs: deploy
    container:
      image: ghcr.io/supportpal/github-gh-cli:2.62.0 
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Configure Git Safe Directory
      run: |
        git config --global --add safe.directory /__w/EchoLink/EchoLink

    - name: Install jq
      run: |
        apt-get update && apt-get install -y jq

    - name: Extract issue numbers from new commit messages
      id: extract_issues
      shell: bash
      run: |
        # Get all commit messages in the current push
        commit_messages=$(git log --pretty=%B ${{ github.event.before }}..${{ github.sha }})

        # Declare an associative array to store unique issue numbers
        declare -A issue_numbers_map

        # Iterate over each commit message
        while IFS= read -r commit_message; do
          # Extract issue numbers from the commit message
          if [[ $commit_message =~ [^0-9]*([0-9]+) ]]; then
            issue_number="${BASH_REMATCH[1]}"
            issue_numbers_map["$issue_number"]=1
          fi
        done <<< "$commit_messages"

        # Check if any issue numbers were found
        if [ ${#issue_numbers_map[@]} -eq 0 ]; then
          echo "No issue numbers found in commit messages"
          exit 0  # Exit gracefully if no issue numbers are found
        fi

        # Join unique issue numbers into a comma-separated string
        issue_numbers_str=$(IFS=,; echo "${!issue_numbers_map[*]}")

        # Set the issue numbers as an environment variable
        echo "issue_numbers=$issue_numbers_str" >> $GITHUB_ENV

    - name: Update project items
      if: env.issue_numbers != ''  
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        ISSUE_NUMBERS: ${{ env.issue_numbers }}
      shell: bash
      run: |
        # Split the issue numbers into an array
        IFS=',' read -r -a issue_numbers <<< "$ISSUE_NUMBERS"

        # Iterate over each issue number and update the project item
        for num in "${issue_numbers[@]}"; do
          task_id=$(gh project item-list 4 --owner UB-ES-2024-F3 --limit 1000 --format json | jq --argjson num "$num" '.items[] | select(.content.number == $num) | .id')
          if [ -n "$task_id" ]; then
            gh project item-edit --id "$task_id" --field-id PVTSSF_lADOCvtt0s4AqPZczghhQYk --project-id PVT_kwDOCvtt0s4AqPZc --single-select-option-id 98236657
          else
            echo "No task ID found for issue number $num"
          fi
        done